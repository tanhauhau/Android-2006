package com.ce2006.project.server;

import android.util.Log;

import com.ce2006.project.model.Appointment;
import com.ce2006.project.model.Clinic;
import com.ce2006.project.model.Credential;
import com.ce2006.project.model.Doctor;
import com.ce2006.project.model.Timeslot;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/**
 * Created by lhtan on 24/3/15.
 */
public class AppointmentBuilder {
    private Credential credential;
    private int type;
    private String city;
    private String note = "";
    private int minute, hour, date, month, year;
    private long doctor;

    public AppointmentBuilder(Credential credential) {
        this.credential = credential;
    }

    public String[] getClinicList(int type) {
        this.type = type;
        Request request = new JsonRequest("api/appointment/clinic_loc");
        request.data("type", String.valueOf(type));
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("locations")) {
            JSONArray array = (JSONArray) content.get("locations");
            String[] results = new String[array.size()];
            for (int i = 0; i < array.size(); i++) {
                String loc = (String) array.get(i);
                results[i] = loc;
            }
            return results;
        }
        return new String[]{};
    }

    public Timeslot[] getTimeslot(String city, int year, int month, int date) {
        this.city = city;
        this.year = year;
        this.month = month;
        this.date = date;
        Request request = new JsonRequest("api/appointment/timeslot/list");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        request.data("type", String.valueOf(type));
        request.data("city", city);
        String dateString = String.format("%d/%d/%d", date, month, year);
        request.data("date", dateString);
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("timeslots")) {
            JSONArray array = (JSONArray) content.get("timeslots");
            Timeslot[] timeslots = new Timeslot[array.size()];
            for (int i = 0; i < array.size(); i++) {
                JSONObject obj = (JSONObject) array.get(i);
                String time = (String) obj.get("time");
                Long n = (Long) obj.get("n");
                timeslots[i] = new Timeslot(time, n.intValue());
            }
            return timeslots;
        }
        return new Timeslot[]{};
    }

    public Doctor[] getDoctor(int hour, int minute) {
        this.hour = hour;
        this.minute = minute;
        Request request = new JsonRequest("api/appointment/doctor/list");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        request.data("type", String.valueOf(type));
        request.data("city", city);
        String dateString = String.format("%d/%d/%d", date, month, year);
        String timeString = String.format("%d:%d:00", hour, minute);
        request.data("date", dateString);
        request.data("timeslot", timeString);

        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("doctors")) {
            JSONArray array = (JSONArray) content.get("doctors");
            Doctor[] doctors = new Doctor[array.size()];
            for (int i = 0; i < array.size(); i++) {
                JSONObject obj = (JSONObject) array.get(i);
                Long id = (Long) obj.get("id");
                String name = (String) obj.get("name");
                String clinic = (String) obj.get("clinic");
                doctors[i] = new Doctor(id, name, clinic);
            }
            return doctors;
        }
        return new Doctor[]{};
    }

    public void setNote(String note) {
        this.note = note;
    }

    public void setHour(int hour) {
        this.hour = hour;
    }

    public void setMinute(int minute) {
        this.minute = minute;
    }

    public Appointment makeAppointment(Long doctor) {
        this.doctor = doctor;
        Request request = new JsonRequest("api/appointment/make");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        String dateString = String.format("%d/%d/%d", date, month, year);
        String timeString = String.format("%d:%d:00", hour, minute);
        request.data("date", dateString);
        request.data("timeslot", timeString);
        request.data("doctor", String.valueOf(doctor));
        request.data("note", note);
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("appointment")) {
            JSONObject appointment = (JSONObject) content.get("appointment");
            Doctor doc = new Doctor((Long) appointment.get("doctorId"),
                    (String) appointment.get("doctorName"),
                    (String) appointment.get("clinicName"));
            return new Appointment((Long) appointment.get("id"),
                    doc,
                    (String) appointment.get("clinicAddress"),
                    (String) appointment.get("clinicContact"),
                    (String) appointment.get("time"),
                    (String) appointment.get("date"),
                    (String) appointment.get("note"));
        }
        return null;
    }

    public String[] getCities() {
        Request request = new JsonRequest("api/location/clinic");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("cities")) {
            JSONArray array = (JSONArray) content.get("cities");
            String[] cities = new String[array.size()];
            for (int i = 0; i < array.size(); i++) {
                cities[i] = (String) array.get(i);
            }
            return cities;
        }
        return new String[]{};
    }

    public Appointment[] getAppointments() {
        Request request = new JsonRequest("api/appointment/list");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("appointments")) {
            JSONArray array = (JSONArray) content.get("appointments");
            Appointment[] appointments = new Appointment[array.size()];
            for (int i = 0; i < array.size(); i++) {
                JSONObject appointment = (JSONObject) array.get(i);
                Doctor doctor = new Doctor((Long) appointment.get("doctorId"),
                        (String) appointment.get("doctorName"),
                        (String) appointment.get("clinicName"));
                appointments[i] = new Appointment((Long) appointment.get("id"),
                        doctor,
                        (String) appointment.get("clinicAddress"),
                        (String) appointment.get("clinicContact"),
                        (String) appointment.get("time"),
                        (String) appointment.get("date"),
                        (String) appointment.get("note"));
            }
            return appointments;
        }
        return new Appointment[]{};
    }

    public Timeslot[] getTimeslot(Long doctor, int year, int month, int date) {
        this.doctor = doctor;
        this.year = year;
        this.month = month;
        this.date = date;
        Request request = new JsonRequest("api/appointment/timeslot/doctor/list");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        request.data("doctor", String.valueOf(doctor));
        String dateString = String.format("%d/%d/%d", date, month, year);
        request.data("date", dateString);
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("timeslots")) {
            JSONArray array = (JSONArray) content.get("timeslots");
            Timeslot[] timeslots = new Timeslot[array.size()];
            for (int i = 0; i < array.size(); i++) {
                JSONObject obj = (JSONObject) array.get(i);
                String time = (String) obj.get("time");
                Long n = (Long) obj.get("n");
                timeslots[i] = new Timeslot(time, n.intValue());
                Log.d("Tan", "timeslots" + timeslots[i]);
            }
            return timeslots;
        }
        return new Timeslot[]{};
    }

    public Clinic[] getClinic(String city) {
        Request request = new JsonRequest("api/clinic/location");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        Log.d("Tan", "city: " + city);
        request.data("city", city);
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("clinics")) {
            JSONArray array = (JSONArray) content.get("clinics");
            Clinic[] clinics = new Clinic[array.size()];
            for (int i = 0; i < array.size(); i++) {
                JSONObject obj = (JSONObject) array.get(i);
                clinics[i] = new Clinic((Long) obj.get("id"),
                        (String) obj.get("name"),
                        (String) obj.get("contact"));
            }
            return clinics;
        }
        return new Clinic[]{};
    }

    public Doctor[] getDoctor(Long clinic) {
        Request request = new JsonRequest("api/doctor/clinic");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        request.data("clinic", String.valueOf(clinic));
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("doctors")) {
            JSONArray array = (JSONArray) content.get("doctors");
            Doctor[] doctors = new Doctor[array.size()];
            for (int i = 0; i < array.size(); i++) {
                JSONObject obj = (JSONObject) array.get(i);
                doctors[i] = new Doctor((Long) obj.get("id"),
                        (String) obj.get("name"),
                        (String) obj.get("clinic"));
            }
            return doctors;
        }
        return new Doctor[]{};
    }

    public boolean delete(Appointment appointment) {
        Request request = new JsonRequest("api/appointment/delete");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());
        request.data("id", String.valueOf(appointment.getId()));
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("success")) {
            return true;
        }
        return false;
    }

    public Appointment updateAppointment(Appointment appointment) {
        Request request = new JsonRequest("api/appointment/modify");
        request.data("username", credential.getUsername());
        request.data("password", credential.getPassword());

        String dateString = String.format("%d/%d/%d", appointment.getDate(), appointment.getMonth(), appointment.getYear());
        String timeString = String.format("%d:%d:00", appointment.getHour(), appointment.getMinute());
        request.data("date", dateString);
        request.data("timeslot", timeString);
        request.data("id", String.valueOf(appointment.getId()));
        JSONObject content = (JSONObject) request.execute();
        if (content != null && content.keySet().contains("appointment")) {
            JSONObject jsonAppointment = (JSONObject) content.get("appointment");
            Doctor doc = new Doctor((Long) jsonAppointment.get("doctorId"),
                    (String) jsonAppointment.get("doctorName"),
                    (String) jsonAppointment.get("clinicName"));
            return new Appointment((Long) jsonAppointment.get("id"),
                    doc,
                    (String) jsonAppointment.get("clinicAddress"),
                    (String) jsonAppointment.get("clinicContact"),
                    (String) jsonAppointment.get("time"),
                    (String) jsonAppointment.get("date"),
                    (String) jsonAppointment.get("note"));
        }
        return null;
    }
}


